{
  "hash": "ac0680112194c87d5d4c7fef29db0145",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: test \ndate: 2020-01-01\neval: true\nfreeze: true\ncategories:\n  - notebook\njupyter: \n  kernelspec:\n    name: \"conda-env-gene46100-py\"\n    language: \"python\"\n    display_name: \"gene46100\"\n---\n\nInstall packages for gene46100\n\n::: {#73f9e19b .cell execution_count=1}\n``` {.python .cell-code}\n# %pip install seaborn matplotlib \n# %pip install scikit-learn plotnine tqdm pandas\n# %pip install numpy ## gets installed with scikit-learn\n# %pip install tqdm\n# %pip install torch\n# %pip install torchvision torchmetrics\n\n```\n:::\n\n\n::: {#365f88ea .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef periodic_u(x_values):\n    \"\"\"\n    Calculates the periodic function u(x) = x, with period L=1.\n    This is equivalent to u(x) = x - floor(x) for an array of x values.\n    Args:\n        x_values (np.array): Input x values.\n    Returns:\n        np.array: Values of the periodic function.\n    \"\"\"\n    return x_values - np.floor(x_values)\n\ndef fourier_series_approx(x_values, n_terms_approx):\n    \"\"\"\n    Calculates the Fourier series approximation of u(x).\n    The formula derived is: u_approx(x) = 1/2 - (1/pi) * sum_{n=1}^{N} (sin(2*pi*n*x) / n)\n    Args:\n        x_values (np.array): Input x values.\n        n_terms_approx (int): Number of terms (N) to include in the summation.\n    Returns:\n        np.array: Values of the Fourier series approximation.\n    \"\"\"\n    # Initialize an array of zeros with the same shape as x_values to store the sum\n    series_sum_val = np.zeros_like(x_values, dtype=float)\n\n    # Sum the series term by term\n    for n_val in range(1, n_terms_approx + 1):\n        series_sum_val += (np.sin(2 * np.pi * n_val * x_values)) / n_val\n\n    # Apply the full formula\n    approximation = 0.5 - (1 / np.pi) * series_sum_val\n    return approximation\n\n# --- Parameters for plotting ---\nN_TERMS_IN_SERIES = 100  # Number of terms in the Fourier series approximation\nX_PLOT_MIN = 0           # Minimum x value for plotting\nX_PLOT_MAX = 3           # Maximum x value for plotting (to show 3 periods)\nNUM_POINTS_PLOT = 1000   # Number of points for generating smooth plot lines\n\n# --- Generate x values for plotting ---\n# Using linspace to create an array of evenly spaced x values\nx_plot_values = np.linspace(X_PLOT_MIN, X_PLOT_MAX, NUM_POINTS_PLOT)\n\n# --- Calculate y values for the original periodic function ---\ny_original_periodic = periodic_u(x_plot_values)\n\n# --- Calculate y values for the Fourier series approximation ---\ny_fourier_approximation = fourier_series_approx(x_plot_values, N_TERMS_IN_SERIES)\n\n# --- Plotting the results ---\nplt.figure(figsize=(14, 8)) # Create a figure with a specified size for better readability\n\n# Plot the original periodic function\nplt.plot(x_plot_values, y_original_periodic, label='Original periodic function $u(x) = x - \\\\lfloor x \\\\rfloor$', color='dodgerblue', linewidth=2.5)\n\n# Plot the Fourier series approximation\nplt.plot(x_plot_values, y_fourier_approximation, label=f'Fourier Series Approx. ({N_TERMS_IN_SERIES} terms)', color='red', linestyle='--', linewidth=2)\n\n# --- Adding plot enhancements ---\nplt.title(f'Original Function vs. Fourier Series Approximation\\n($u(x)=x$, period $L=1$, {N_TERMS_IN_SERIES} terms)', fontsize=18)\nplt.xlabel('$x$', fontsize=16)\nplt.ylabel('$u(x)$', fontsize=16)\nplt.legend(fontsize=12, loc='upper right')\nplt.grid(True, linestyle=':', alpha=0.6) # Add a grid for easier value reading\nplt.ylim(-0.25, 1.25) # Set y-axis limits to focus on the function's range\nplt.axhline(0, color='black', linewidth=0.75) # Add a horizontal line at y=0\nplt.axvline(0, color='black', linewidth=0.75) # Add a vertical line at x=0\n\n# Add text annotations for clarity if needed, e.g., pointing out Gibbs phenomenon\n# plt.annotate('Gibbs Phenomenon', xy=(1, 0.9), xytext=(1.2, 0.7),\n#              arrowprops=dict(facecolor='black', shrink=0.05), fontsize=10)\n\n# Display the plot\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](test_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "test_files"
    ],
    "filters": [],
    "includes": {}
  }
}